echom ">^.^<"
set nocompatible " required
set nu
set encoding=utf-8
set tabstop=4
filetype off     " required
filetype plugin indent on

" ===
" === Install Plugins with Vim-plug
" ===

call plug#begin('~/.vim/plugged')
" Shorthand notation for plugin
" start_screen
Plug 'mhinz/vim-startify'

" File navigation
" 可替换为coc.explorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'connorholyday/vim-snazzy'
Plug 'junegunn/fzf',{'do':{-> fzf#install()}}
Plug 'junegunn/fzf.vim'

" ack/ag
Plug 'mileszs/ack.vim'

" format style
Plug 'Yggdroot/indentLine'

" Python
Plug 'vim-scripts/indentpython.vim'
Plug 'sillybun/vim-repl',{'do':'./install.sh'}
Plug 'sillybun/vim-async',{'do':'./install.sh'}
Plug 'sillybun/zytutil'
" 下面插件可以改写condaEnv :CondaChangeEnv
" 可以map it to key:
" map <F4> :CondaChangeEnv<CR>
Plug 'cjrh/vim-conda'

" Perl
Plug 'bmeneg/coc-perl',{'do': 'yarn install && yarn build'}

" Markdown
" 使用了coc.nvim插件
Plug 'dhruvasagar/vim-table-mode'
Plug 'plasticboy/vim-markdown'

" LaTex
Plug 'lervag/vimtex'

" Other visual enhancement
Plug 'nathanaelkane/vim-indent-guides'
Plug 'itchyny/vim-cursorword'
Plug 'vim-airline/vim-airline'

" `word`
" Plug 'godlygeek/tabular' " type ;Tabularize /= to align the =
" Plug 'gcmt/wildfire.vim' " in Visual mode, type i' to select all text in '', or type i) i] i} ip

Plug 'scrooloose/nerdcommenter' " in <space>cc to comment a line

" Auto Complete
Plug 'neoclide/coc.nvim',{'branch':'release'}

call plug#end()


let g:SnazzyTransparent = 1

" ===
" ===start_screen BY Plug vim-startify
" ===
"需要安装figlet，文本转化，详见：www.figlet.org
let g:ascii1 = [
          \ ' MOM',
          \ 'Joyce',
          \ '  v   '
  \ ]
						
let g:startify_custom_header = startify#pad(g:ascii1 + split(system('</home/song/Pictures/ASCII_ART/snippet1'),'\n') + split(system('figlet -w 100 VIM2022'),'\n'))
" let g:startify_custom_header = 
" 						\ startify#pad(split(system('</home/song/Pictures/ASCII_ART/snippet1'))+ startify#fortune#boxed())
"let g:startify_custom_header = startify#pad(g:ascii_nipple + '\n' + split(system('figlet -w 100 VIM2020'), '\n'))
" ===
" === 分割屏幕=
" ===
" 向右分屏 
map sl :set splitright<CR>:vsplit<CR>
" 向左分屏 
map sh :set nosplitright<CR>:vsplit<CR>
" 向上分屏 
map sk :set nosplitbelow<CR>:split<CR>
" 向下分屏 
map sj :set splitbelow<CR>:split<CR>


"===
"===  split navigations
"===
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" 分屏设置
" 方向键 上 使上屏幕增加5个宽度
map <Up> :res +5<CR>
" 方向键 下 使下屏幕增加5个宽度
map <Down> :res -5<CR>
" 方向键 右 使右屏幕增加5个宽度
map <Right> :vertical resize +5<CR>
" 方向键 左 使左屏幕增加5个宽度
map <Left> :vertical resize -5<CR>

" +++++分割屏幕+++++

" Enable folding 代码折叠
"set foldmethod=indent
"set foldlevel=99
" Enable folding with the spacebar
"nnoremap <space> za

"设置代码折叠插件
let g:SimplyFold_docstring_preview=1

" ===
" === NERDTree
" === 
map nt :NERDTreeToggle<CR>

" ==
" == NERDTree-git
" ==
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
" ===         
" === coc.vim
" ===
let g:coc_node_path ="/usr/bin/node"
let g:coc_global_extensions = [
	\ 'coc-explorer',
	\ 'coc-json',
	\ 'coc-pyright',
	\ 'coc-python',
	\ 'coc-perl',
	\ 'coc-snippets',
	\ 'coc-translator']	
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.

inoremap <silent><expr> <TAB>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<TAB>" :
	\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" try ':verbose imap <CR>'
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Useful commands
nmap tt :CocCommand explorer<CR>
" coc-translator
nmap ts <Plug>(coc-translator-p)

" ===
" === FZF
" ===
nnoremap <c-p> :Leaderf file<CR>
" noremap <silent> <C-p> :Files<CR>
" noremap <silent> <C-f> :Rg<CR>
" noremap <silent> <C-h> :History<CR>
"noremap <C-t> :BTags<CR>
" noremap <silent> <C-l> :Lines<CR>
" noremap <silent> <C-w> :Buffers<CR>
" noremap <leader>; :History:<CR>

let g:fzf_preview_window = 'right:60%'
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

function! s:list_buffers()
  redir => list
  silent ls
  redir END
  return split(list, "\n")
endfunction

function! s:delete_buffers(lines)
  execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
endfunction

command! BD call fzf#run(fzf#wrap({
  \ 'source': s:list_buffers(),
  \ 'sink*': { lines -> s:delete_buffers(lines) },
  \ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
\ }))

" noremap <c-d> :BD<CR>

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }
" ==ack/ag ag.vim deprecated
let g:ackprg = 'ag --vimgrep'
nmap <Leader><Leader>a :Ack<space>-i<space> 
" ===
" === FZF
" === END
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'python'
		exec "!time python3 %"
	endif
endfunc

" ============
" ===python===
" ============
" vim-conda
" In order to avoid a warning when opening vim without an environment activated, add the variable in the 'vimrc' file.
" let g:conda_startup_wrn_suppress=1
" let g:conda_startup_msg_suppress=1
" let g:jedi#force_py_version = 2
" let g:UltisnipsUsePythonVersion = 2

" vim-Repl
let g:repl_prcgram = {
            \   'python': 'ipython',
            \   'default': 'zsh',
            \   'r': 'R',
            \   'lua': 'lua',
            \   'vim': 'vim -e',
            \   }
let g:repl_predefine_python = {
            \   'numpy': 'import numpy as np',
            \   'matplotlib': 'from matplotlib import pyplot as plt'
            \   }
let g:repl_checkpoint_position = '~/.temp/'
let g:repl_auto_sends = ['class ', 'def ']
let g:repl_cursor_down = 1
" let g:repl_python_automerge = 1
" let g:repl_ipython_version = '7'
" let g:repl_output_copy_to_register = 't'
nnoremap <leader>r :REPLToggle<Cr>
nnoremap <leader>e :REPLSendSession<Cr>
autocmd Filetype python nnoremap <F12> <Esc>:REPLDebugStopAtCurrentLine<Cr>
autocmd Filetype python nnoremap <F10> <Esc>:REPLPDBN<Cr>
autocmd Filetype python nnoremap <F11> <Esc>:REPLPDBS<Cr>
let g:repl_checkpoint_notation = "CP"
let g:repl_position = 3

" ============
" ===python===
" ===END======

" set绝对和相对行号

augroup relative_number
 autocmd!
 autocmd InsertEnter * :set norelativenumber
 autocmd InsertLeave * :set relativenumber
augroup END


" ============
" ==Markdown==
" ============
autocmd Filetype markdown noremap ,m :CocCommand markdown-preview-enhanced.openPreview<CR>
autocmd Filetype markdown noremap ,,m :CocCommand markdown-preview-enhanced.syncPreview<CR>
" 禁止用折叠
let g:vim_markdown_folding_disabled = 1

" ============
" ==Markdown==
" ===END======

" ============
" ==按键设置==
" ============
inoremap jj <ESC>
nnoremap  I# <ESC>
" ============
" ==按键设置==
" ===END======

" ============
" ====LaTex===
" ============
" vimtex
syntax enable
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_compiler_method = 'latexmk' " default
let maplocalleader = ","
"# let g:vimtex_quickfix_mode=0
"# set conceallevel=1
"# let g:tex_conceal='abdmg'
"# " 对中文的支持
"# let g:Tex_CompileRule_pdf = 'xelatex -synctex=1 --interaction=nonstopmode $*'

" ============
" ===LaTex===
" ===END======
"
" ============
" coc-snippets
" ============
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

" Make `<tab>` used for trigger completion, completion confirm, snippet expand and jump like VSCode. 
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'
" ============
" coc-snippets
" ====END=====
