echom ">^.^<"
set nocompatible " required
set nu
set encoding=utf-8
set tabstop=4
filetype off     " required
filetype plugin indent on

" ===
" === Install Plugins with Vim-plug
" ===

call plug#begin('~/.vim/plugged')
" Shorthand notation for plugin
" start_screen
Plug 'mhinz/vim-startify'

" File navigation
" 可替换为coc.explorer
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'junegunn/fzf',{'do':{-> fzf#install()}}
" Plug 'junegunn/fzf.vim'
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" ack/ag
Plug 'mileszs/ack.vim'

" format style
Plug 'Yggdroot/indentLine'

" qutora
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'quarto-dev/quarto-vim'

" Other visual enhancement
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'scrooloose/nerdcommenter' " in <space>cc to comment a line

" Auto Complete
Plug 'neoclide/coc.nvim',{'branch':'release'}

call plug#end()


let g:SnazzyTransparent = 1

" ===
" === 分割屏幕=
" ===
" 向右分屏 
map sl :set splitright<CR>:vsplit<CR>
" 向左分屏 
map sh :set nosplitright<CR>:vsplit<CR>
" 向上分屏 
map sk :set nosplitbelow<CR>:split<CR>
" 向下分屏 
map sj :set splitbelow<CR>:split<CR>


"===
"===  split navigations
"===
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" 分屏设置
" 方向键 上 使上屏幕增加5个宽度
map <Up> :res +5<CR>
" 方向键 下 使下屏幕增加5个宽度
map <Down> :res -5<CR>
" 方向键 右 使右屏幕增加5个宽度
map <Right> :vertical resize +5<CR>
" 方向键 左 使左屏幕增加5个宽度
map <Left> :vertical resize -5<CR>

" +++++分割屏幕+++++

" Enable folding 代码折叠
"set foldmethod=indent
"set foldlevel=99
" Enable folding with the spacebar
"nnoremap <space> za

"设置代码折叠插件
let g:SimplyFold_docstring_preview=1

" ===
" === NERDTree
" === 
map nt :NERDTreeToggle<CR>

" ==
" == NERDTree-git
" ==
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
" ==
" == airline
" ==
set laststatus=2  "永远显示状态栏
let g:airline_powerline_fonts = 1  " 支持 powerline 字体
let g:airline#extensions#tabline#enabled = 1 " 显示窗口tab和buffer
let g:airline_theme='murmur'  " murmur配色不错

if !exists('g:airline_symbols')
		let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
" set绝对和相对行号

augroup relative_number
 autocmd!
 autocmd InsertEnter * :set norelativenumber
 autocmd InsertLeave * :set relativenumber
augroup END

" ============
" ==按键设置==
" ============
inoremap jj <ESC>
nnoremap  I# <ESC>
" ============
" ==按键设置==
" ===END======

" ============
" coc-snippets
" ============
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)

" ============
" coc-snippets
" ====END=====

" The X clipboard gets flushed when vim exits. To make the vim selection persistent within X clipboard, you need a clipboard manager. Alternatively, you can add 
autocmd VimLeave * call system("echo -n $'" . escape(getreg(), "'") . "' | xsel --input --clipboard")
" ============
" nerdcommenter
" =============
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
"
" " Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'
"
" " Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
"
" " Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' }}

" " Allow commenting and inverting empty lines (useful when commenting a
" region)
let g:NERDCommentEmptyLines = 1
"
" " Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
"
" " Enable NERDCommenterToggle to check all selected lines is commented or not 
let g:NERDToggleCheckAllLines = 1

" ============
" auto-pairs
" =============
au Filetype FILETYPE let b:AutoPairs = {"(": ")"}
au FileType php      let b:AutoPairs = AutoPairsDefine({'<?' : '?>', '<?php': '?>'})
