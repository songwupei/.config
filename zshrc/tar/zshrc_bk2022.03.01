## autostart
neofetch
#

#
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/song/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(zsh-autosuggestions vi-mode fzf)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

export PHOME="/home/song/Nutstore Files/Python"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias condaup=". ~/miniconda3/bin/activate" # 激活miniconda3 环境

alias szshrc="source ~/.zshrc;echo 'reload zshrc'"
alias lslf="ls -lF" # 简写ls命令
mv2githubs () { # 移动下载git到 ~/githubs
		mv $(find . -maxdepth 1 -name $1 ${HOME}/githubs)
}
# shell_stdy temp
local zshpath=${PHOME}/706.Terminal/2.ZSH
alias zshhw="cd ~/文档/zsh_hw"
alias zshfd="cd $zshpath"
alias txtdemo="cd ${PHOME}/9.shell/raw/"

# VIM_study temp
local vimpath=${PHOME}/704.IDE/VIM
alias vimfd="cd $vimpath"

## backup config_file of zsh i3w vim coc-set 

bkfile() {
	local taday 
	local backup_path=${PHOME}/701.Linux/.config

	zmodload zsh/datetime
	strftime -s taday "%Y.%m.%d"
	zmodload -u zsh/datetime
	[[ -e $backup_path ]] || mkdir $backup_path
	if [[ $#1 == 3 ]] {
		case $1 {
			(zsh)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1 
			cp -i ~/.zshrc ${backup_path}/$1/zshrc_bk${taday}
			;;
			(vim)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1
			cp -i ~/.vimrc ${backup_path}/$1/vimrc_bk${taday}
			;;
			(coc)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1
			cp -i ~/.vim/coc-settings.json ${backup_path}/$1/coc-settings.json_bk${taday}
			;;
			(dwm)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1
			cp -i ~/.xinitrc ${backup_path}/$1/dwm_xinitrc_bk${taday}
			;;
			(*)
			echo error
			;;
		} } elif [[ $#1 == 4 ]] {

		case $1 {
			(i3wm)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1
			cp -i ~/.config/i3/config ${backup_path}/$1/i3wm_config_bk${taday}
			;;
        	(*)
			echo error
			;;
	}  }  elif [[ $#1 == 6 ]] {
		case $1 {
			(ranger)
	        [[ -e $backup_path/$1 ]] || mkdir $backup_path/$1
			tar -cvPf ${backup_path}/$1/rangerrc${taday} ~/.config/ranger 
			;;
	        (*)
			echo error
			;;
	}  }  elif [[ $#1 == 8 ]] {
		case $1 {
			(neofetch)
			cp -i ~/.config/neofetch/config.conf ${backup_path}/$1/neofetch_config_bk${taday}
			;;
	        (*)
			echo error
			;;
	}}
		unset backup_path
}
# move the backup_file
mvbkfile() {
		tname=${1:t}
		# filepath is absolute full path
		case $tname[1,3] {
				(zsh)
						cp -i  $1 ~/.zshrc
						;;
				(vim)
						cp -i  $1 ~/.vimrc
						;;
				(coc)
						cp -i  $1 ~/.vim/coc-settings.json
						;;
				(i3w)
						cp -i  $1 ~/.config/i3/config
						;;
				(dwm)
						cp -i  $1 ~/.xinitrc
						;;
				(*)
						cp -i  error
						;;
				}
}
# recover the backup_file 
recbkfile() {  
		# fpath=$backup_path/${$(ls -t $backup_path | grep $1* -m 1)}
		local backup_path=${PHOME}/706.Terminal/0.config
		local fpath=${$(find $backup_path -type f -name $1* -mtime -60 -print0 | head -z -n 1 | tr -d '\0')}
		local bkfile=$backup_path/${fpath:t}
	if [[ -e $bkfile ]] {
		mvbkfile $bkfile
	}	elif {
	echo err_bkfile
}
unset backup_path
unset fpath

unset bkfile
}

## ZSH/Tools
# 1.zip_tools
alias zipal='zsh ~/Nutstore\ Files/Python/706.Terminal/2.ZSH/Tools/al'
alias zipa='zsh ~/Nutstore\ Files/Python/706.Terminal/2.ZSH/Tools/a'
alias zipx='zsh ~/Nutstore\ Files/Python/706.Terminal/2.ZSH/Tools/x'

# 2.rr 并发运行命令的工具

# alias rr='zsh ~/Nutstore\ Files/Python/706.Terminal/ZSH/Tools/rr'
# rr 是一个函数（可放在 .zshrc 中），直接 rr 加命令即可使用
# 格式：rr [-j<10>] 
# 命令中支持变量、重定向等等，格式上和直接输入命令没有区别（不支持 alias）
# 如果不加参数，则显示当前运行的进程数、最大进程并发数和运行中进程的进程号
# 默认最大进程并发数是 10
# 用 -j 来指定最大进程并发数，指定一次即可，如需修改可再次指定
# 可以只调整最大进程并发数而不运行命令
# 超过了最大进程并发数，等待，并且每一秒检查一次是否有进程退出
# 如果有进程退出，则继续在后台运行当前命令
rr() {
		(($+max_process)) || typeset -g max_process=10
		(($+running_process)) || typeset -gA running_process=()

		[[ $1 == -j<1-> ]] && {
				max_process=${1[3,-1]}
        shift
    }

    (($# == 0)) && {
        for i (${(k)running_process}) {
            [[ -e /proc/$i ]] || unset "running_process[$i]"
        }

        echo "running/max: $#running_process/$max_process"
        (($#running_process > 0)) && echo "pid: ${(k)running_process}"
        return
    }

    while ((1)) {
        local running_process_num=$#running_process

        if (($running_process_num < max_process)) {
            $* &
            running_process[$!]=1
            return
        }

        for i (${(k)running_process}) {
            [[ -e /proc/$i ]] || unset "running_process[$i]"
        }

        (($#running_process == $running_process_num)) && {
            echo "running/max: $running_process_num/$max_process, wait 1s ..."
            echo "pid: ${(k)running_process}"
            sleep 1
        }
    }
}

# 3.python
local pythonpath="/home/song/Nutstore\ Files/Python"
local pytoolspath="$pythonpath/INGwork/VSCODE/My_Packages"
mp3tagiconvpath="$pytoolspath/mp3tagiconv.py"
alias pytoolsfd="cd $pytoolspath"
# alias mp3tagsedit="python3 $mp3tagiconvpath"
mp3tagsedit() {
	# local pypath='/home/song/Nutstore\ Files/Python/INGwork/VSCODE/My_Packages/mp3tagiconv.py'
	# python3 $pypath --mp3fd_path $1 --find_pat $2
	python3 /home/song/Nutstore\ Files/Python/INGwork/VSCODE/My_Packages/mp3tagiconv.py --mp3fd_path $1 --find_pat $2
	}

alias pythonfd="cd $pythonpath"

# 4.mp3tag
local zshtoolspath="~/Nutstore\ Files/Python/706.Terminal/ZSH/Tools"
alias zshtoolsfd="cd $zshtoolspath"
alias mp3tag="zsh $zshtoolspath/mp3tag.zsh"

alias xj803fd="cd ~/Music/刑警803"

# config
## 1.vim
alias vvimrc="vim ~/.vimrc"

xfdfile() {
	# 命令:vim 要查找文件:perl2.pl 新文件:perl4.pl
	if (($+3)) {
	$1 ${$(find  ~/**/$2):h}/$3
} elif (($+2)) {
	$1 ${$(find  ~/**/$2):h}/$2
} else {
	echo 'error'
}}

vsnippets() {
	vim ${HOME}/.config/coc/ultisnips/$1.snippets
}

alias vcocjson="vim ~/.vim/coc-settings.json"

pandocmd (){
	pandoc -s $1.md -o $2.docx --reference-doc=/home/song/Documents/Normal/$3.docx
}

## 2.zsh
alias vzshrc="vim ~/.zshrc"

## 3.tmux
alias vtmuxcf="vim ${HOME}/.tmux.conf"

## 4.ranger
alias rg="ranger"

## 5.i3wm
alias vi3wmrc="vim ~/.config/i3/config"

## 6.dwm
alias vdwmrc="vim ~/.dwm/config.h"
kslstatus() {
		kill -9 $(ps ax |grep -v grep | grep -e 'slstatus' | awk '{print $1}')
}


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/song/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/song/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/song/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/song/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<


# ============
# ===setopt===
# ===start====

setopt EXTENDED_GLOB
setopt no_nomatch

#
# ============
# ===setopt===
# ====end=====

# =============
# ==autoload===
# ===start=====

autoload -U zmv

# =============
# ==autoload===
# ====end======


# =============
# ===vi-mode===
# =============
# status-bar on the right
VIMODE='-- INSERT --'
function zle-line-init zle-keymap-select {
    VIMODE="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
    zle reset-prompt
    }
zle -N zle-line-init 
zle -N zle-keymap-select

RPROMPT='%{$fg[green]%}${VIMODE}%{$reset_color%}'


# =============
# ===vi-mode===
# ====end======


# =============
# ====fzf======
# =============
# fzf setting
export FZF_BASE='/usr/share/gocode/src/github.com/junegunn/fzf'
export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'
DISABLE_FZF_AUTO_COMPLETION="false"
DISABLE_FZF_KEY_BINDINGS="false"
# ==import TheCW_fzf.zsh==
source ~/.config/zsh/fzf.zsh


# ============
# =====fzf====
# ====end======

# ============
# =====perl===
# ==start=====
PATH="/home/song/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/home/song/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/song/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/song/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/song/perl5"; export PERL_MM_OPT;
# ============
# =====perl===
# ====end======

# ============
# ===ranger===
# ==start=====
export RANGER_LOAD_DEFAULT_RC=FALSE
# ============
# =====ranger===
# ====end======
